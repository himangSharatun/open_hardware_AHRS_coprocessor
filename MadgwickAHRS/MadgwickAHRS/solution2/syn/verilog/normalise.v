// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.3.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module normalise (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_r_address0,
        in_r_ce0,
        in_r_we0,
        in_r_d0,
        in_r_q0
);

parameter    ap_ST_fsm_state1 = 77'd1;
parameter    ap_ST_fsm_state2 = 77'd2;
parameter    ap_ST_fsm_state3 = 77'd4;
parameter    ap_ST_fsm_state4 = 77'd8;
parameter    ap_ST_fsm_state5 = 77'd16;
parameter    ap_ST_fsm_state6 = 77'd32;
parameter    ap_ST_fsm_state7 = 77'd64;
parameter    ap_ST_fsm_state8 = 77'd128;
parameter    ap_ST_fsm_state9 = 77'd256;
parameter    ap_ST_fsm_state10 = 77'd512;
parameter    ap_ST_fsm_state11 = 77'd1024;
parameter    ap_ST_fsm_state12 = 77'd2048;
parameter    ap_ST_fsm_state13 = 77'd4096;
parameter    ap_ST_fsm_state14 = 77'd8192;
parameter    ap_ST_fsm_state15 = 77'd16384;
parameter    ap_ST_fsm_state16 = 77'd32768;
parameter    ap_ST_fsm_state17 = 77'd65536;
parameter    ap_ST_fsm_state18 = 77'd131072;
parameter    ap_ST_fsm_state19 = 77'd262144;
parameter    ap_ST_fsm_state20 = 77'd524288;
parameter    ap_ST_fsm_state21 = 77'd1048576;
parameter    ap_ST_fsm_state22 = 77'd2097152;
parameter    ap_ST_fsm_state23 = 77'd4194304;
parameter    ap_ST_fsm_state24 = 77'd8388608;
parameter    ap_ST_fsm_state25 = 77'd16777216;
parameter    ap_ST_fsm_state26 = 77'd33554432;
parameter    ap_ST_fsm_state27 = 77'd67108864;
parameter    ap_ST_fsm_state28 = 77'd134217728;
parameter    ap_ST_fsm_state29 = 77'd268435456;
parameter    ap_ST_fsm_state30 = 77'd536870912;
parameter    ap_ST_fsm_state31 = 77'd1073741824;
parameter    ap_ST_fsm_state32 = 77'd2147483648;
parameter    ap_ST_fsm_state33 = 77'd4294967296;
parameter    ap_ST_fsm_state34 = 77'd8589934592;
parameter    ap_ST_fsm_state35 = 77'd17179869184;
parameter    ap_ST_fsm_state36 = 77'd34359738368;
parameter    ap_ST_fsm_state37 = 77'd68719476736;
parameter    ap_ST_fsm_state38 = 77'd137438953472;
parameter    ap_ST_fsm_state39 = 77'd274877906944;
parameter    ap_ST_fsm_state40 = 77'd549755813888;
parameter    ap_ST_fsm_state41 = 77'd1099511627776;
parameter    ap_ST_fsm_state42 = 77'd2199023255552;
parameter    ap_ST_fsm_state43 = 77'd4398046511104;
parameter    ap_ST_fsm_state44 = 77'd8796093022208;
parameter    ap_ST_fsm_state45 = 77'd17592186044416;
parameter    ap_ST_fsm_state46 = 77'd35184372088832;
parameter    ap_ST_fsm_state47 = 77'd70368744177664;
parameter    ap_ST_fsm_state48 = 77'd140737488355328;
parameter    ap_ST_fsm_state49 = 77'd281474976710656;
parameter    ap_ST_fsm_state50 = 77'd562949953421312;
parameter    ap_ST_fsm_state51 = 77'd1125899906842624;
parameter    ap_ST_fsm_state52 = 77'd2251799813685248;
parameter    ap_ST_fsm_state53 = 77'd4503599627370496;
parameter    ap_ST_fsm_state54 = 77'd9007199254740992;
parameter    ap_ST_fsm_state55 = 77'd18014398509481984;
parameter    ap_ST_fsm_state56 = 77'd36028797018963968;
parameter    ap_ST_fsm_state57 = 77'd72057594037927936;
parameter    ap_ST_fsm_state58 = 77'd144115188075855872;
parameter    ap_ST_fsm_state59 = 77'd288230376151711744;
parameter    ap_ST_fsm_state60 = 77'd576460752303423488;
parameter    ap_ST_fsm_state61 = 77'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 77'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 77'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 77'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 77'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 77'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 77'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 77'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 77'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 77'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 77'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 77'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 77'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 77'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 77'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 77'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 77'd75557863725914323419136;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [1:0] in_r_address0;
output   in_r_ce0;
output   in_r_we0;
output  [31:0] in_r_d0;
input  [31:0] in_r_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[1:0] in_r_address0;
reg in_r_ce0;
reg in_r_we0;
reg[31:0] in_r_d0;

(* fsm_encoding = "none" *) reg   [76:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] reg_126;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state64;
wire    ap_CS_fsm_state71;
wire   [31:0] grp_fu_116_p2;
reg   [31:0] reg_133;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state62;
wire    ap_CS_fsm_state76;
wire   [31:0] grp_fu_110_p2;
reg   [31:0] reg_140;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond1_fu_146_p2;
wire   [2:0] i_1_fu_157_p2;
reg   [2:0] i_1_reg_314;
wire   [0:0] notlhs_fu_181_p2;
reg   [0:0] notlhs_reg_319;
wire    ap_CS_fsm_state19;
wire   [0:0] notrhs_fu_187_p2;
reg   [0:0] notrhs_reg_324;
wire   [0:0] grp_fu_121_p2;
reg   [0:0] tmp_6_reg_329;
wire    ap_CS_fsm_state22;
wire   [31:0] SumOfSquare_4_fu_202_p3;
reg   [31:0] SumOfSquare_4_reg_334;
wire    ap_CS_fsm_state33;
reg   [30:0] tmp_i_reg_340;
wire    ap_CS_fsm_state34;
wire   [31:0] y_2_fu_226_p2;
reg   [31:0] y_2_reg_345;
wire   [31:0] tmp_i_6_fu_232_p1;
reg   [31:0] tmp_i_6_reg_350;
wire    ap_CS_fsm_state39;
reg   [1:0] in_addr_2_reg_359;
wire    ap_CS_fsm_state63;
wire   [0:0] exitcond_fu_236_p2;
wire   [1:0] i_2_fu_247_p2;
reg   [1:0] i_2_reg_364;
reg   [31:0] tmp_s_reg_369;
wire    ap_CS_fsm_state69;
wire   [0:0] notlhs5_fu_271_p2;
reg   [0:0] notlhs5_reg_374;
wire    ap_CS_fsm_state72;
wire   [0:0] notrhs6_fu_277_p2;
reg   [0:0] notrhs6_reg_379;
reg   [0:0] tmp_13_reg_384;
wire    ap_CS_fsm_state75;
reg   [2:0] i_reg_76;
reg   [31:0] SumOfSquare_reg_87;
reg   [1:0] i1_reg_99;
wire    ap_CS_fsm_state70;
wire   [63:0] tmp_1_fu_152_p1;
wire   [63:0] tmp_9_fu_242_p1;
wire    ap_CS_fsm_state77;
wire   [31:0] storemerge_fu_292_p3;
reg   [31:0] grp_fu_110_p0;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state49;
reg   [31:0] grp_fu_116_p0;
reg   [31:0] grp_fu_116_p1;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state58;
wire    ap_CS_fsm_state65;
wire   [31:0] in_load_to_int_fu_163_p1;
wire   [7:0] tmp_fu_167_p4;
wire   [22:0] tmp_12_fu_177_p1;
wire   [0:0] tmp_4_fu_193_p2;
wire   [0:0] tmp_7_fu_197_p2;
wire   [31:0] y_fu_210_p1;
wire   [31:0] tmp_8_fu_223_p1;
wire   [31:0] in_load_2_to_int_fu_253_p1;
wire   [7:0] tmp_10_fu_257_p4;
wire   [22:0] tmp_16_fu_267_p1;
wire   [0:0] tmp_11_fu_283_p2;
wire   [0:0] tmp_14_fu_287_p2;
reg   [1:0] grp_fu_110_opcode;
reg   [76:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 77'd1;
end

MadgwickAHRSupdatbkb #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
MadgwickAHRSupdatbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_110_p0),
    .din1(reg_133),
    .opcode(grp_fu_110_opcode),
    .ce(1'b1),
    .dout(grp_fu_110_p2)
);

MadgwickAHRSupdatcud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
MadgwickAHRSupdatcud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_116_p0),
    .din1(grp_fu_116_p1),
    .ce(1'b1),
    .dout(grp_fu_116_p2)
);

MadgwickAHRSupdatdEe #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
MadgwickAHRSupdatdEe_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_126),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd1),
    .dout(grp_fu_121_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        SumOfSquare_reg_87 <= grp_fu_110_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        SumOfSquare_reg_87 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        i1_reg_99 <= i_2_reg_364;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        i1_reg_99 <= 2'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        i_reg_76 <= i_1_reg_314;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_76 <= 3'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        SumOfSquare_4_reg_334 <= SumOfSquare_4_fu_202_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_146_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_1_reg_314 <= i_1_fu_157_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == exitcond_fu_236_p2) & (1'b1 == ap_CS_fsm_state63))) begin
        i_2_reg_364 <= i_2_fu_247_p2;
        in_addr_2_reg_359 <= tmp_9_fu_242_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        notlhs5_reg_374 <= notlhs5_fu_271_p2;
        notrhs6_reg_379 <= notrhs6_fu_277_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        notlhs_reg_319 <= notlhs_fu_181_p2;
        notrhs_reg_324 <= notrhs_fu_187_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state3))) begin
        reg_126 <= in_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state8))) begin
        reg_133 <= grp_fu_116_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state17))) begin
        reg_140 <= grp_fu_110_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        tmp_13_reg_384 <= grp_fu_121_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        tmp_6_reg_329 <= grp_fu_121_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        tmp_i_6_reg_350 <= tmp_i_6_fu_232_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        tmp_i_reg_340 <= {{y_fu_210_p1[31:1]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        tmp_s_reg_369 <= grp_fu_116_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        y_2_reg_345 <= y_2_fu_226_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state77) | ((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        grp_fu_110_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state9))) begin
        grp_fu_110_opcode = 2'd0;
    end else begin
        grp_fu_110_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        grp_fu_110_p0 = 32'd1069547520;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state9))) begin
        grp_fu_110_p0 = SumOfSquare_reg_87;
    end else begin
        grp_fu_110_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        grp_fu_116_p0 = tmp_i_6_reg_350;
    end else if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state39))) begin
        grp_fu_116_p0 = reg_133;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_fu_116_p0 = SumOfSquare_4_reg_334;
    end else if (((1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state19))) begin
        grp_fu_116_p0 = reg_126;
    end else begin
        grp_fu_116_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state72))) begin
        grp_fu_116_p1 = reg_133;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        grp_fu_116_p1 = reg_140;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        grp_fu_116_p1 = tmp_i_6_reg_350;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        grp_fu_116_p1 = tmp_i_6_fu_232_p1;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_fu_116_p1 = 32'd1056964608;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state19))) begin
        grp_fu_116_p1 = reg_126;
    end else begin
        grp_fu_116_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        in_r_address0 = in_addr_2_reg_359;
    end else if (((1'd0 == exitcond_fu_236_p2) & (1'b1 == ap_CS_fsm_state63))) begin
        in_r_address0 = tmp_9_fu_242_p1;
    end else if (((1'b1 == ap_CS_fsm_state77) | ((exitcond_fu_236_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state63)) | ((exitcond1_fu_146_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        in_r_address0 = 64'd0;
    end else if (((exitcond1_fu_146_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        in_r_address0 = tmp_1_fu_152_p1;
    end else begin
        in_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state70) | ((exitcond_fu_236_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state63)) | ((1'd0 == exitcond_fu_236_p2) & (1'b1 == ap_CS_fsm_state63)) | ((exitcond1_fu_146_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((exitcond1_fu_146_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        in_r_ce0 = 1'b1;
    end else begin
        in_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        in_r_d0 = storemerge_fu_292_p3;
    end else if ((1'b1 == ap_CS_fsm_state70)) begin
        in_r_d0 = tmp_s_reg_369;
    end else begin
        in_r_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state70))) begin
        in_r_we0 = 1'b1;
    end else begin
        in_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond1_fu_146_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            if (((exitcond_fu_236_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state63))) begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign SumOfSquare_4_fu_202_p3 = ((tmp_7_fu_197_p2[0:0] === 1'b1) ? SumOfSquare_reg_87 : reg_140);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign exitcond1_fu_146_p2 = ((i_reg_76 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond_fu_236_p2 = ((i1_reg_99 == 2'd3) ? 1'b1 : 1'b0);

assign i_1_fu_157_p2 = (i_reg_76 + 3'd1);

assign i_2_fu_247_p2 = (i1_reg_99 + 2'd1);

assign in_load_2_to_int_fu_253_p1 = reg_126;

assign in_load_to_int_fu_163_p1 = reg_126;

assign notlhs5_fu_271_p2 = ((tmp_10_fu_257_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs_fu_181_p2 = ((tmp_fu_167_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs6_fu_277_p2 = ((tmp_16_fu_267_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs_fu_187_p2 = ((tmp_12_fu_177_p1 == 23'd0) ? 1'b1 : 1'b0);

assign storemerge_fu_292_p3 = ((tmp_14_fu_287_p2[0:0] === 1'b1) ? 32'd0 : reg_133);

assign tmp_10_fu_257_p4 = {{in_load_2_to_int_fu_253_p1[30:23]}};

assign tmp_11_fu_283_p2 = (notrhs6_reg_379 | notlhs5_reg_374);

assign tmp_12_fu_177_p1 = in_load_to_int_fu_163_p1[22:0];

assign tmp_14_fu_287_p2 = (tmp_13_reg_384 & tmp_11_fu_283_p2);

assign tmp_16_fu_267_p1 = in_load_2_to_int_fu_253_p1[22:0];

assign tmp_1_fu_152_p1 = i_reg_76;

assign tmp_4_fu_193_p2 = (notrhs_reg_324 | notlhs_reg_319);

assign tmp_7_fu_197_p2 = (tmp_6_reg_329 & tmp_4_fu_193_p2);

assign tmp_8_fu_223_p1 = tmp_i_reg_340;

assign tmp_9_fu_242_p1 = i1_reg_99;

assign tmp_fu_167_p4 = {{in_load_to_int_fu_163_p1[30:23]}};

assign tmp_i_6_fu_232_p1 = y_2_reg_345;

assign y_2_fu_226_p2 = (32'd1597463007 - tmp_8_fu_223_p1);

assign y_fu_210_p1 = SumOfSquare_4_reg_334;

endmodule //normalise
