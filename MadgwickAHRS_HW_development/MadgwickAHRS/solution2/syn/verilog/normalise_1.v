// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.3.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module normalise_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_0_read,
        in_1_read,
        in_2_read,
        in_3_read,
        ap_return_0,
        ap_return_1,
        ap_return_2
);

parameter    ap_ST_fsm_state1 = 75'd1;
parameter    ap_ST_fsm_state2 = 75'd2;
parameter    ap_ST_fsm_state3 = 75'd4;
parameter    ap_ST_fsm_state4 = 75'd8;
parameter    ap_ST_fsm_state5 = 75'd16;
parameter    ap_ST_fsm_state6 = 75'd32;
parameter    ap_ST_fsm_state7 = 75'd64;
parameter    ap_ST_fsm_state8 = 75'd128;
parameter    ap_ST_fsm_state9 = 75'd256;
parameter    ap_ST_fsm_state10 = 75'd512;
parameter    ap_ST_fsm_state11 = 75'd1024;
parameter    ap_ST_fsm_state12 = 75'd2048;
parameter    ap_ST_fsm_state13 = 75'd4096;
parameter    ap_ST_fsm_state14 = 75'd8192;
parameter    ap_ST_fsm_state15 = 75'd16384;
parameter    ap_ST_fsm_state16 = 75'd32768;
parameter    ap_ST_fsm_state17 = 75'd65536;
parameter    ap_ST_fsm_state18 = 75'd131072;
parameter    ap_ST_fsm_state19 = 75'd262144;
parameter    ap_ST_fsm_state20 = 75'd524288;
parameter    ap_ST_fsm_state21 = 75'd1048576;
parameter    ap_ST_fsm_state22 = 75'd2097152;
parameter    ap_ST_fsm_state23 = 75'd4194304;
parameter    ap_ST_fsm_state24 = 75'd8388608;
parameter    ap_ST_fsm_state25 = 75'd16777216;
parameter    ap_ST_fsm_state26 = 75'd33554432;
parameter    ap_ST_fsm_state27 = 75'd67108864;
parameter    ap_ST_fsm_state28 = 75'd134217728;
parameter    ap_ST_fsm_state29 = 75'd268435456;
parameter    ap_ST_fsm_state30 = 75'd536870912;
parameter    ap_ST_fsm_state31 = 75'd1073741824;
parameter    ap_ST_fsm_state32 = 75'd2147483648;
parameter    ap_ST_fsm_state33 = 75'd4294967296;
parameter    ap_ST_fsm_state34 = 75'd8589934592;
parameter    ap_ST_fsm_state35 = 75'd17179869184;
parameter    ap_ST_fsm_state36 = 75'd34359738368;
parameter    ap_ST_fsm_state37 = 75'd68719476736;
parameter    ap_ST_fsm_state38 = 75'd137438953472;
parameter    ap_ST_fsm_state39 = 75'd274877906944;
parameter    ap_ST_fsm_state40 = 75'd549755813888;
parameter    ap_ST_fsm_state41 = 75'd1099511627776;
parameter    ap_ST_fsm_state42 = 75'd2199023255552;
parameter    ap_ST_fsm_state43 = 75'd4398046511104;
parameter    ap_ST_fsm_state44 = 75'd8796093022208;
parameter    ap_ST_fsm_state45 = 75'd17592186044416;
parameter    ap_ST_fsm_state46 = 75'd35184372088832;
parameter    ap_ST_fsm_state47 = 75'd70368744177664;
parameter    ap_ST_fsm_state48 = 75'd140737488355328;
parameter    ap_ST_fsm_state49 = 75'd281474976710656;
parameter    ap_ST_fsm_state50 = 75'd562949953421312;
parameter    ap_ST_fsm_state51 = 75'd1125899906842624;
parameter    ap_ST_fsm_state52 = 75'd2251799813685248;
parameter    ap_ST_fsm_state53 = 75'd4503599627370496;
parameter    ap_ST_fsm_state54 = 75'd9007199254740992;
parameter    ap_ST_fsm_state55 = 75'd18014398509481984;
parameter    ap_ST_fsm_state56 = 75'd36028797018963968;
parameter    ap_ST_fsm_state57 = 75'd72057594037927936;
parameter    ap_ST_fsm_state58 = 75'd144115188075855872;
parameter    ap_ST_fsm_state59 = 75'd288230376151711744;
parameter    ap_ST_fsm_state60 = 75'd576460752303423488;
parameter    ap_ST_fsm_state61 = 75'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 75'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 75'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 75'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 75'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 75'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 75'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 75'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 75'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 75'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 75'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 75'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 75'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 75'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 75'd18889465931478580854784;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] in_0_read;
input  [31:0] in_1_read;
input  [31:0] in_2_read;
input  [31:0] in_3_read;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;
output  [31:0] ap_return_2;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [74:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] grp_fu_142_p2;
reg   [31:0] reg_152;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state24;
reg   [0:0] tmp_7_reg_382;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state49;
wire    ap_CS_fsm_state63;
wire    ap_CS_fsm_state74;
wire   [31:0] grp_fu_136_p2;
reg   [31:0] reg_159;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state58;
wire   [31:0] in_load_1_phi_fu_193_p3;
reg   [31:0] in_load_1_phi_reg_371;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond1_fu_165_p2;
wire   [2:0] i_1_fu_200_p2;
reg   [2:0] i_1_reg_377;
wire   [0:0] tmp_7_fu_241_p2;
wire    ap_CS_fsm_state19;
wire   [31:0] SumOfSquare_3_fu_247_p3;
reg   [31:0] SumOfSquare_3_reg_388;
wire    ap_CS_fsm_state34;
reg   [30:0] tmp_i_reg_394;
wire    ap_CS_fsm_state35;
wire   [31:0] y_1_fu_270_p2;
reg   [31:0] y_1_reg_399;
wire   [31:0] tmp_i_4_fu_276_p1;
reg   [31:0] tmp_i_4_reg_404;
wire    ap_CS_fsm_state40;
wire   [0:0] cond_fu_286_p2;
reg   [0:0] cond_reg_413;
wire    ap_CS_fsm_state64;
wire   [0:0] exitcond_fu_280_p2;
wire   [31:0] in_load_3_phi_fu_292_p3;
reg   [31:0] in_load_3_phi_reg_419;
wire   [1:0] i_2_fu_300_p2;
reg   [1:0] i_2_reg_424;
reg   [31:0] tmp_s_reg_429;
wire    ap_CS_fsm_state69;
wire   [31:0] in2_1_fu_306_p3;
wire    ap_CS_fsm_state70;
wire   [31:0] in12_1_fu_312_p3;
reg   [2:0] i_reg_82;
reg   [31:0] SumOfSquare_reg_93;
reg   [31:0] in2_reg_105;
reg   [31:0] in_reg_115;
reg   [1:0] i1_reg_125;
reg   [31:0] grp_fu_136_p0;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state50;
reg   [31:0] grp_fu_142_p0;
reg   [31:0] grp_fu_142_p1;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state59;
wire    ap_CS_fsm_state65;
wire   [1:0] tmp_9_fu_171_p1;
wire   [0:0] sel_tmp_fu_175_p2;
wire   [0:0] sel_tmp2_fu_187_p2;
wire   [31:0] sel_tmp1_fu_181_p3;
wire   [31:0] in_0_read_to_int_fu_206_p1;
wire   [7:0] tmp_fu_209_p4;
wire   [22:0] tmp_1_fu_219_p1;
wire   [0:0] notrhs_fu_229_p2;
wire   [0:0] notlhs_fu_223_p2;
wire   [0:0] tmp_4_fu_235_p2;
wire   [0:0] grp_fu_147_p2;
wire   [31:0] y_fu_254_p1;
wire   [31:0] tmp_8_fu_267_p1;
wire    ap_CS_fsm_state75;
wire   [31:0] in_0_write_assign_fu_318_p3;
reg   [1:0] grp_fu_136_opcode;
reg   [74:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 75'd1;
end

MadgwickAHRSupdatbkb #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
MadgwickAHRSupdatbkb_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_136_p0),
    .din1(reg_152),
    .opcode(grp_fu_136_opcode),
    .ce(1'b1),
    .dout(grp_fu_136_p2)
);

MadgwickAHRSupdatcud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
MadgwickAHRSupdatcud_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_142_p0),
    .din1(grp_fu_142_p1),
    .ce(1'b1),
    .dout(grp_fu_142_p2)
);

MadgwickAHRSupdatdEe #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
MadgwickAHRSupdatdEe_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(in_0_read),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd1),
    .dout(grp_fu_147_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        SumOfSquare_reg_93 <= grp_fu_136_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        SumOfSquare_reg_93 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        i1_reg_125 <= i_2_reg_424;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        i1_reg_125 <= 2'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        i_reg_82 <= i_1_reg_377;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_82 <= 3'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        in2_reg_105 <= in2_1_fu_306_p3;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        in2_reg_105 <= in_2_read;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        in_reg_115 <= in12_1_fu_312_p3;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        in_reg_115 <= in_1_read;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        SumOfSquare_3_reg_388 <= SumOfSquare_3_fu_247_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state64) & (1'd0 == exitcond_fu_280_p2))) begin
        cond_reg_413 <= cond_fu_286_p2;
        i_2_reg_424 <= i_2_fu_300_p2;
        in_load_3_phi_reg_419 <= in_load_3_phi_fu_292_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == exitcond1_fu_165_p2))) begin
        i_1_reg_377 <= i_1_fu_200_p2;
        in_load_1_phi_reg_371 <= in_load_1_phi_fu_193_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state74) & (tmp_7_reg_382 == 1'd0)) | ((1'b1 == ap_CS_fsm_state24) & (tmp_7_reg_382 == 1'd0)))) begin
        reg_152 <= grp_fu_142_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state16) | ((1'b1 == ap_CS_fsm_state33) & (tmp_7_reg_382 == 1'd0)))) begin
        reg_159 <= grp_fu_136_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        tmp_7_reg_382 <= tmp_7_fu_241_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        tmp_i_4_reg_404 <= tmp_i_4_fu_276_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        tmp_i_reg_394 <= {{y_fu_254_p1[31:1]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        tmp_s_reg_429 <= grp_fu_142_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        y_1_reg_399 <= y_1_fu_270_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state75) | ((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        grp_fu_136_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state8) | ((1'b1 == ap_CS_fsm_state25) & (tmp_7_reg_382 == 1'd0)))) begin
        grp_fu_136_opcode = 2'd0;
    end else begin
        grp_fu_136_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        grp_fu_136_p0 = 32'd1069547520;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state8))) begin
        grp_fu_136_p0 = SumOfSquare_reg_93;
    end else begin
        grp_fu_136_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        grp_fu_142_p0 = in_load_3_phi_reg_419;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        grp_fu_142_p0 = tmp_i_4_reg_404;
    end else if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state40))) begin
        grp_fu_142_p0 = reg_152;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        grp_fu_142_p0 = SumOfSquare_3_reg_388;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_142_p0 = in_0_read;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_142_p0 = in_load_1_phi_reg_371;
    end else begin
        grp_fu_142_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        grp_fu_142_p1 = reg_152;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        grp_fu_142_p1 = reg_159;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        grp_fu_142_p1 = tmp_i_4_reg_404;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        grp_fu_142_p1 = tmp_i_4_fu_276_p1;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        grp_fu_142_p1 = 32'd1056964608;
    end else if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state64))) begin
        grp_fu_142_p1 = in_0_read;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_142_p1 = in_load_1_phi_reg_371;
    end else begin
        grp_fu_142_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_165_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            if (((exitcond_fu_280_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state64))) begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign SumOfSquare_3_fu_247_p3 = ((tmp_7_reg_382[0:0] === 1'b1) ? SumOfSquare_reg_93 : reg_159);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_return_0 = in_reg_115;

assign ap_return_1 = in2_reg_105;

assign ap_return_2 = in_0_write_assign_fu_318_p3;

assign cond_fu_286_p2 = ((i1_reg_125 == 2'd1) ? 1'b1 : 1'b0);

assign exitcond1_fu_165_p2 = ((i_reg_82 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond_fu_280_p2 = ((i1_reg_125 == 2'd3) ? 1'b1 : 1'b0);

assign i_1_fu_200_p2 = (3'd1 + i_reg_82);

assign i_2_fu_300_p2 = (i1_reg_125 + 2'd1);

assign in12_1_fu_312_p3 = ((cond_reg_413[0:0] === 1'b1) ? tmp_s_reg_429 : in_reg_115);

assign in2_1_fu_306_p3 = ((cond_reg_413[0:0] === 1'b1) ? in2_reg_105 : tmp_s_reg_429);

assign in_0_read_to_int_fu_206_p1 = in_0_read;

assign in_0_write_assign_fu_318_p3 = ((tmp_7_reg_382[0:0] === 1'b1) ? 32'd0 : reg_152);

assign in_load_1_phi_fu_193_p3 = ((sel_tmp2_fu_187_p2[0:0] === 1'b1) ? in_1_read : sel_tmp1_fu_181_p3);

assign in_load_3_phi_fu_292_p3 = ((cond_fu_286_p2[0:0] === 1'b1) ? in_reg_115 : in2_reg_105);

assign notlhs_fu_223_p2 = ((tmp_fu_209_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs_fu_229_p2 = ((tmp_1_fu_219_p1 == 23'd0) ? 1'b1 : 1'b0);

assign sel_tmp1_fu_181_p3 = ((sel_tmp_fu_175_p2[0:0] === 1'b1) ? in_2_read : in_3_read);

assign sel_tmp2_fu_187_p2 = ((tmp_9_fu_171_p1 == 2'd1) ? 1'b1 : 1'b0);

assign sel_tmp_fu_175_p2 = ((tmp_9_fu_171_p1 == 2'd2) ? 1'b1 : 1'b0);

assign tmp_1_fu_219_p1 = in_0_read_to_int_fu_206_p1[22:0];

assign tmp_4_fu_235_p2 = (notrhs_fu_229_p2 | notlhs_fu_223_p2);

assign tmp_7_fu_241_p2 = (tmp_4_fu_235_p2 & grp_fu_147_p2);

assign tmp_8_fu_267_p1 = tmp_i_reg_394;

assign tmp_9_fu_171_p1 = i_reg_82[1:0];

assign tmp_fu_209_p4 = {{in_0_read_to_int_fu_206_p1[30:23]}};

assign tmp_i_4_fu_276_p1 = y_1_reg_399;

assign y_1_fu_270_p2 = (32'd1597463007 - tmp_8_fu_267_p1);

assign y_fu_254_p1 = SumOfSquare_3_reg_388;

endmodule //normalise_1
