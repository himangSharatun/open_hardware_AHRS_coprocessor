// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.3.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _feedbackStep_HH_
#define _feedbackStep_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "MadgwickAHRSupdateOg.h"
#include "MadgwickAHRSupdatcud.h"

namespace ap_rtl {

struct feedbackStep : public sc_module {
    // Port declarations 15
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_lv<32> > qDot_0_read;
    sc_in< sc_lv<32> > qDot_1_read;
    sc_in< sc_lv<32> > qDot_2_read;
    sc_in< sc_lv<32> > qDot_3_read;
    sc_in< sc_lv<32> > beta;
    sc_in< sc_lv<32> > s_0_read;
    sc_in< sc_lv<32> > s_1_read;
    sc_in< sc_lv<32> > s_2_read;
    sc_in< sc_lv<32> > s_3_read;
    sc_out< sc_lv<32> > ap_return_0;
    sc_out< sc_lv<32> > ap_return_1;
    sc_out< sc_lv<32> > ap_return_2;
    sc_out< sc_lv<32> > ap_return_3;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    feedbackStep(sc_module_name name);
    SC_HAS_PROCESS(feedbackStep);

    ~feedbackStep();

    sc_trace_file* mVcdFile;

    MadgwickAHRSupdateOg<1,9,32,32,32>* MadgwickAHRSupdateOg_U15;
    MadgwickAHRSupdateOg<1,9,32,32,32>* MadgwickAHRSupdateOg_U16;
    MadgwickAHRSupdateOg<1,9,32,32,32>* MadgwickAHRSupdateOg_U17;
    MadgwickAHRSupdateOg<1,9,32,32,32>* MadgwickAHRSupdateOg_U18;
    MadgwickAHRSupdatcud<1,5,32,32,32>* MadgwickAHRSupdatcud_U19;
    MadgwickAHRSupdatcud<1,5,32,32,32>* MadgwickAHRSupdatcud_U20;
    MadgwickAHRSupdatcud<1,5,32,32,32>* MadgwickAHRSupdatcud_U21;
    MadgwickAHRSupdatcud<1,5,32,32,32>* MadgwickAHRSupdatcud_U22;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter3;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter4;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter5;
    sc_signal< bool > ap_block_state7_pp0_stage0_iter6;
    sc_signal< bool > ap_block_state8_pp0_stage0_iter7;
    sc_signal< bool > ap_block_state9_pp0_stage0_iter8;
    sc_signal< bool > ap_block_state10_pp0_stage0_iter9;
    sc_signal< bool > ap_block_state11_pp0_stage0_iter10;
    sc_signal< bool > ap_block_state12_pp0_stage0_iter11;
    sc_signal< bool > ap_block_state13_pp0_stage0_iter12;
    sc_signal< bool > ap_block_state14_pp0_stage0_iter13;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<32> > qDot_3_read_1_reg_178;
    sc_signal< sc_lv<32> > ap_reg_pp0_iter1_qDot_3_read_1_reg_178;
    sc_signal< sc_lv<32> > ap_reg_pp0_iter2_qDot_3_read_1_reg_178;
    sc_signal< sc_lv<32> > ap_reg_pp0_iter3_qDot_3_read_1_reg_178;
    sc_signal< sc_lv<32> > ap_reg_pp0_iter4_qDot_3_read_1_reg_178;
    sc_signal< sc_lv<32> > qDot_2_read_1_reg_183;
    sc_signal< sc_lv<32> > ap_reg_pp0_iter1_qDot_2_read_1_reg_183;
    sc_signal< sc_lv<32> > ap_reg_pp0_iter2_qDot_2_read_1_reg_183;
    sc_signal< sc_lv<32> > ap_reg_pp0_iter3_qDot_2_read_1_reg_183;
    sc_signal< sc_lv<32> > ap_reg_pp0_iter4_qDot_2_read_1_reg_183;
    sc_signal< sc_lv<32> > qDot_1_read_1_reg_188;
    sc_signal< sc_lv<32> > ap_reg_pp0_iter1_qDot_1_read_1_reg_188;
    sc_signal< sc_lv<32> > ap_reg_pp0_iter2_qDot_1_read_1_reg_188;
    sc_signal< sc_lv<32> > ap_reg_pp0_iter3_qDot_1_read_1_reg_188;
    sc_signal< sc_lv<32> > ap_reg_pp0_iter4_qDot_1_read_1_reg_188;
    sc_signal< sc_lv<32> > qDot_0_read_1_reg_193;
    sc_signal< sc_lv<32> > ap_reg_pp0_iter1_qDot_0_read_1_reg_193;
    sc_signal< sc_lv<32> > ap_reg_pp0_iter2_qDot_0_read_1_reg_193;
    sc_signal< sc_lv<32> > ap_reg_pp0_iter3_qDot_0_read_1_reg_193;
    sc_signal< sc_lv<32> > ap_reg_pp0_iter4_qDot_0_read_1_reg_193;
    sc_signal< sc_lv<32> > grp_fu_102_p2;
    sc_signal< sc_lv<32> > tmp_s_reg_198;
    sc_signal< sc_lv<32> > grp_fu_108_p2;
    sc_signal< sc_lv<32> > tmp_1_reg_203;
    sc_signal< sc_lv<32> > grp_fu_114_p2;
    sc_signal< sc_lv<32> > tmp_2_reg_208;
    sc_signal< sc_lv<32> > grp_fu_120_p2;
    sc_signal< sc_lv<32> > tmp_3_reg_213;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<32> > grp_fu_86_p2;
    sc_signal< sc_lv<32> > grp_fu_90_p2;
    sc_signal< sc_lv<32> > grp_fu_94_p2;
    sc_signal< sc_lv<32> > grp_fu_98_p2;
    static const sc_logic ap_const_logic_1;
    static const bool ap_const_boolean_1;
    static const bool ap_const_boolean_0;
    static const sc_logic ap_const_logic_0;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_state10_pp0_stage0_iter9();
    void thread_ap_block_state11_pp0_stage0_iter10();
    void thread_ap_block_state12_pp0_stage0_iter11();
    void thread_ap_block_state13_pp0_stage0_iter12();
    void thread_ap_block_state14_pp0_stage0_iter13();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_block_state3_pp0_stage0_iter2();
    void thread_ap_block_state4_pp0_stage0_iter3();
    void thread_ap_block_state5_pp0_stage0_iter4();
    void thread_ap_block_state6_pp0_stage0_iter5();
    void thread_ap_block_state7_pp0_stage0_iter6();
    void thread_ap_block_state8_pp0_stage0_iter7();
    void thread_ap_block_state9_pp0_stage0_iter8();
    void thread_ap_return_0();
    void thread_ap_return_1();
    void thread_ap_return_2();
    void thread_ap_return_3();
};

}

using namespace ap_rtl;

#endif
